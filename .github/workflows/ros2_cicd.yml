# Name of the GitHub Actions workflow.
name: ROS2 CICD

# Controls when the workflow will run.
on:
  # Triggers the workflow on push events but only for the "master" branch.
  push:
    branches: [ "master" ]
  # Triggers the workflow on pull request events targeting the "master" branch.
  pull_request:
    branches: [ "master" ]

jobs:
  # Job 1: Build the Docker image once and save it as an artifact.
  build:
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.get_image_name.outputs.image_name }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      # Use a step to define the image name, making it accessible to other jobs.
      - name: Get Docker Image Name
        id: get_image_name
        run: echo "image_name=ros2_project_image" >> $GITHUB_OUTPUT

      # This step builds the image but does not push it.
      - name: Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true # Load the image into the local Docker daemon for saving.
          tags: ${{ steps.get_image_name.outputs.image_name }}:latest

      # Save the built image as an artifact so other jobs can use it.
      - name: Save Docker image
        run: docker save ${{ steps.get_image_name.outputs.image_name }}:latest -o ${{ steps.get_image_name.outputs.image_name }}.tar

      # Upload the saved image artifact.
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: ${{ steps.get_image_name.outputs.image_name }}.tar

  # Job 2: Run tests using the pre-built image.
  test:
    # This job depends on the 'build' job completing successfully.
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Download the image artifact created by the 'build' job.
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      # Load the downloaded image into the local Docker daemon.
      - name: Load Docker image
        run: docker load < ${{ needs.build.outputs.image_name }}.tar

      # This is more memory-efficient and uses the correct build flags.
      - name: Build and Test ROS 2 Workspace
        run: |
          docker run --rm \
            -v ${{ github.workspace }}/src:/home/rosuser/ros2_ws/src \
            ${{ needs.build.outputs.image_name }}:latest \
            bash -c "colcon build --symlink-install --executor sequential && colcon test --executor sequential && colcon test-result --verbose"

  # Job 3: Push the verified image to Docker Hub.
  push-to-dockerhub:
    # This job runs only after both 'build' and 'test' are successful.
    needs: [build, test]
    # This job will only run on a push to the 'master' branch, not on pull requests.
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    runs-on: ubuntu-latest
    steps:
      # Download the verified image artifact again.
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          
      # Load the image into the local Docker daemon.
      - name: Load Docker image
        run: docker load < ${{ needs.build.outputs.image_name }}.tar

      # Log in to Docker Hub using the secrets you created.
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Tag the image correctly for pushing to Docker Hub.
      - name: Tag image for push
        run: |
          docker tag ${{ needs.build.outputs.image_name }}:latest ${{ secrets.DOCKERHUB_USERNAME }}/ros2_sample_project:latest
          docker tag ${{ needs.build.outputs.image_name }}:latest ${{ secrets.DOCKERHUB_USERNAME }}/ros2_sample_project:${{ github.sha }}
      
      # Push both tags to Docker Hub.
      - name: Push image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/ros2_sample_project:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/ros2_sample_project:${{ github.sha }}
